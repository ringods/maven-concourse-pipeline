resource_types:
- name: artifactory
  type: registry-image
  source:
    repository: springio/artifactory-resource
    tag: 0.0.13

resources:
- name: source-code-resource
  type: git
  source:
    uri: ((source-code-resource-uri))
    private_key: ((github-private-key))
    branch: ((source-code-resource-branch))

- name: pipeline-resource
  type: git
  source:
    uri: ((pipeline-resource-uri))
    branch: ((pipeline-resource-branch))
    private_key: ((github-private-key))

- name: version-resource
  type: semver
  source:
    driver: git
    initial_version: 0.0.1
    uri: ((source-code-resource-uri)) # convention over configuration = version file is on the version branch of the application's repo
    private_key: ((github-private-key))
    branch: version
    file: version

- name: build-artifact-resource
  type: artifactory
  source:
    uri: ((repo-uri))
    username: ((repo-username))
    password: ((repo-password))
    build_name: maven-concourse-pipeline-app1

jobs:
- name: job-build-and-verify
  plan:
  - get: source-code-resource
    trigger: true
  - get: pipeline-resource
  - get: version-resource
    params:
      bump: patch
      pre: SNAPSHOT
      pre_without_version: true
  - task: build-and-verify
    file: pipeline-resource/tasks/maven-build.yml
    input_mapping: {source-code: source-code-resource, pipeline: pipeline-resource, version: version-resource}
    output_mapping: {build: install-artifact}
    params:
      BRANCH: ((source-code-resource-branch))
      M2_SETTINGS_REPO_ID: ((repo-id))
      M2_SETTINGS_REPO_USERNAME: ((repo-username))
      M2_SETTINGS_REPO_PASSWORD: ((repo-password))
      M2_SETTINGS_REPO_VIRTUAL_URI: ((repo-virtual-uri))
      M2_SETTINGS_REPO_RELEASE_URI: ((repo-release-uri))
      M2_SETTINGS_REPO_SNAPSHOT_URI: ((repo-snapshot-uri))
  - put: build-artifact-resource
    inputs:
    - install-artifact
    params:
      repo: maven-local
      module_layout: maven
      build_number: "${BUILD_ID}"
      folder: install-artifact
      build_uri: "http://localhost:8080/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}"

- name: job-build-and-deploy
  plan:
  - get: source-code-resource
    passed: 
    - job-build-and-verify
  - get: pipeline-resource
  - get: version-resource
    trigger: true
  - task: build-and-deploy
    file: pipeline-resource/tasks/maven-build.yml
    input_mapping: {source-code: source-code-resource, pipeline: pipeline-resource, version: version-resource}
    output_mapping: {build: install-artifact}
    params:
      BRANCH: ((source-code-resource-branch))
      M2_SETTINGS_REPO_ID: ((repo-id))
      M2_SETTINGS_REPO_USERNAME: ((repo-username))
      M2_SETTINGS_REPO_PASSWORD: ((repo-password))
      M2_SETTINGS_REPO_VIRTUAL_URI: ((repo-virtual-uri))
      M2_SETTINGS_REPO_RELEASE_URI: ((repo-release-uri))
      M2_SETTINGS_REPO_SNAPSHOT_URI: ((repo-snapshot-uri))
  - put: build-artifact-resource
    inputs:
    - install-artifact
    params:
      repo: maven-local
      module_layout: maven
      build_number: "${BUILD_ID}"
      folder: install-artifact
      build_uri: "http://localhost:8080/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}"

- name: next-major-release
  serial: true
  plan:
  - put: version-resource
    params:
      bump: major

- name: next-minor-release
  serial: true
  plan:
  - put: version-resource
    params:
      bump: minor

- name: next-patch-release
  serial: true
  plan:
  - put: version-resource
    params:
      bump: patch
